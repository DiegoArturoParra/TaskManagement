// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TemplateCRUDNet7.Context;

#nullable disable

namespace TemplateCRUDNet7.Migrations
{
    [DbContext(typeof(TemplateContext))]
    partial class TemplateContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TemplateCRUDNet7.Entities.BranchOffice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<Guid>("CurrencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Identification")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.ToTable("BRANCH_OFFICES", "QUALA");

                    b.HasData(
                        new
                        {
                            Id = new Guid("56d88913-4c91-48c5-bd10-d1207ff313fe"),
                            Address = "Address 1",
                            Code = 1,
                            CurrencyId = new Guid("30521493-3784-42a6-9c3a-6878a82cc718"),
                            DateCreated = new DateTime(2023, 10, 27, 17, 19, 54, 755, DateTimeKind.Local).AddTicks(4047),
                            Description = "Quipitos",
                            Identification = "Identification 1",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("b4bfc08e-87cd-4cf0-9fb2-0dab76b746f8"),
                            Address = "Address 2",
                            Code = 2,
                            CurrencyId = new Guid("6d4abaf0-c7c7-48da-bdfd-d13a265b65e5"),
                            DateCreated = new DateTime(2023, 10, 28, 17, 19, 54, 755, DateTimeKind.Local).AddTicks(4326),
                            Description = "Suntea",
                            Identification = "Identification 2",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("210617fe-7051-4bab-9b41-1408c95f13db"),
                            Address = "Address 3",
                            Code = 3,
                            CurrencyId = new Guid("bebd20c0-bf7d-40f5-99dd-27b5dbf65abf"),
                            DateCreated = new DateTime(2023, 10, 29, 17, 19, 54, 755, DateTimeKind.Local).AddTicks(4345),
                            Description = "Boka",
                            Identification = "Identification 3",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("de24bc52-4f25-40ef-8b12-44d5bbd6a3e5"),
                            Address = "Address 4",
                            Code = 4,
                            CurrencyId = new Guid("2efb906f-3eb5-4143-b936-d19525389551"),
                            DateCreated = new DateTime(2023, 10, 30, 17, 19, 54, 755, DateTimeKind.Local).AddTicks(4357),
                            Description = "Ricostilla",
                            Identification = "Identification 4",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("fc4a72f7-fb22-41c2-9f0f-0971c68311f9"),
                            Address = "Address 5",
                            Code = 5,
                            CurrencyId = new Guid("bebd20c0-bf7d-40f5-99dd-27b5dbf65abf"),
                            DateCreated = new DateTime(2023, 10, 31, 17, 19, 54, 755, DateTimeKind.Local).AddTicks(4368),
                            Description = "Boka",
                            Identification = "Identification 5",
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("TemplateCRUDNet7.Entities.Currency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Acronym")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CURRENCY", "QUALA");

                    b.HasData(
                        new
                        {
                            Id = new Guid("331a6bef-a1f1-4911-a0b2-123a2e9b0651"),
                            Acronym = "USD",
                            Description = "Dólar estadounidense"
                        },
                        new
                        {
                            Id = new Guid("3026df76-0919-4cab-99b6-972e76adbdb9"),
                            Acronym = "EUR",
                            Description = "Euro"
                        },
                        new
                        {
                            Id = new Guid("998a498f-9bdd-438e-9363-129a82a8a3f1"),
                            Acronym = "JPY",
                            Description = "Yen japonés"
                        },
                        new
                        {
                            Id = new Guid("2efb906f-3eb5-4143-b936-d19525389551"),
                            Acronym = "GBP",
                            Description = "Libra esterlina"
                        },
                        new
                        {
                            Id = new Guid("30521493-3784-42a6-9c3a-6878a82cc718"),
                            Acronym = "AUD",
                            Description = "Dólar australiano"
                        },
                        new
                        {
                            Id = new Guid("6d4abaf0-c7c7-48da-bdfd-d13a265b65e5"),
                            Acronym = "CAD",
                            Description = "Dólar canadiense"
                        },
                        new
                        {
                            Id = new Guid("0803e4e3-75cc-48c5-a3c9-b5bd27ad7b0d"),
                            Acronym = "CHF",
                            Description = "Franco suizo"
                        },
                        new
                        {
                            Id = new Guid("bebd20c0-bf7d-40f5-99dd-27b5dbf65abf"),
                            Acronym = "CNY",
                            Description = "Yuan chino"
                        },
                        new
                        {
                            Id = new Guid("c2551abf-cd74-4df4-bcdb-e056e8ade9a7"),
                            Acronym = "SEK",
                            Description = "Corona sueca"
                        },
                        new
                        {
                            Id = new Guid("82e58f8e-fd8b-4601-9d2a-390ff05f5ef2"),
                            Acronym = "NZD",
                            Description = "Dólar neozelandés"
                        });
                });

            modelBuilder.Entity("TemplateCRUDNet7.Entities.BranchOffice", b =>
                {
                    b.HasOne("TemplateCRUDNet7.Entities.Currency", "TypeCurrency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TypeCurrency");
                });
#pragma warning restore 612, 618
        }
    }
}
